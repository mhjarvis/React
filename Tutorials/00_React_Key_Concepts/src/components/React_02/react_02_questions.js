const questions_02 = [
    [
        "1. What's the idea behind using components?",
        "The idea behind this concept is, that user interfaces can be split into smaller, encapsulated chunks of code. This can help with building more complex user interfaces as developers don't have to work on one big chunk of code.",
    ],
    [
        "2. How can you create a React component",
        "As JavaScript classes and as JavaScript functions.",
    ],
    [
        "3. What turns a regular function into a React component function?",
        "When using functions, only certain kinds of functions qualify as React components. Specifically, a function must return some 'renderable' content like JSX code. In addition, when using a custom component function as a component inside of JSX code, developers must use component names that start with an uppercase character (like <SubmitButton />). This is required by React to tell custom components apart from built-in components that reflect native HTML elements like <div> etc.",
    ],
    [
        "4. Which core rules should you keep in mind regarding JSX elements?",
        "1. When using custom components inside of JSX code, these components must start with an uppercase character (e.g. <SubmitButton>); 2. In general, PascalCase naming should be used for custom component; 3. Built-in components that reflect native HTML elements are all-lowercase (like <p>); 4. Void elements (like <img>) must be self-closing: <img /> instead of <img>; 5. JSX values are like regular JavaScript values, hence in places, where a single value is expected (e.g. after the return keyword), no sibling values are allowed",
    ],
    [
        "How is JSX code handled by React and ReactDOM?",
        "JSX code is picked up and handled by the React library. React & ReactDOM 'translate' renderable content like JSX code into actual DOM-manipulating instructions. To be precise, all modern React projects contain a build workflow that transforms JSX code into React.createElement(...) method calls. React.createElement(...) is then the actual instruction that is received and handled by React. Ultimately, the above-mentioned DOM-manipulation instructions are then generated by ReactDOM.",
    ],
];

export { questions_02 };
